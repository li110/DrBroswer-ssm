package org.springmvc.controller;


import com.alibaba.fastjson.JSON;
import com.sun.org.apache.bcel.internal.generic.NEW;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springmvc.dao.UserMapper;
import org.springmvc.dto.BaseInfoPatTypeList;
import org.springmvc.dto.CheckResult;
import org.springmvc.dto.Pagination;
import org.springmvc.dto.PaginationResult;
import org.springmvc.pojo.Patient;
import org.springmvc.pojo.RegisterInfo;
import org.springmvc.pojo.Report;
import org.springmvc.pojo.User;
import org.springmvc.service.*;
import org.springmvc.tool.ReportImageGenerator;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@RequestMapping("/baseInfo")
@Controller
public class BaseInfoController {
    @Resource
    private PatientService patientService;

    private ReportService reportService;
    private RegInfoService regInfoService;
    private ReportImageGenerator reportImageGenerator;
    private HisInfoService hisInfoService;
    @Resource
    private UserService userService;

    @RequestMapping(value = "/getPatTypeInfo")
    @ResponseBody
    public String getPatTypeInfo(Pagination p) {
        int currIndex = (p.getPageCurrent() - 1) * p.getPageSize();
        int pageSize = p.getPageSize();
        boolean ifFirst = (p.getPageCurrent() == 1);
        int totalRow = 6;
        boolean ifLast = ((currIndex + pageSize) <= totalRow) ? true : false;
        int totalPage = (totalRow % pageSize) == 0 ? (totalRow / pageSize) : ((totalRow / pageSize) + 1);


        List<BaseInfoPatTypeList> baseInfoPatTypeLists = new ArrayList<BaseInfoPatTypeList>();
        BaseInfoPatTypeList b_1 = new BaseInfoPatTypeList("1", "门诊");
        BaseInfoPatTypeList b_2 = new BaseInfoPatTypeList("2", "住院");
        baseInfoPatTypeLists.add(b_1);
        baseInfoPatTypeLists.add(b_2);

        PaginationResult<BaseInfoPatTypeList> paginationResult = new PaginationResult<BaseInfoPatTypeList>();
        paginationResult.setFirstPage(ifFirst);
        paginationResult.setLastPage(ifLast);
        paginationResult.setList(baseInfoPatTypeLists); //!
        paginationResult.setPageNumber(p.getPageCurrent());
        paginationResult.setTotalRow(totalRow);
        paginationResult.setTotalPage(totalPage);
        paginationResult.setPageSize(pageSize);

        return JSON.toJSONString(paginationResult);
    }

        @RequestMapping(value = "/getDepAttribute")
        @ResponseBody
        public String getDepAttributeInfo(Pagination p){
            int currIndex = (p.getPageCurrent() - 1) * p.getPageSize();
            int pageSize  = p.getPageSize();
            boolean ifFirst = (p.getPageCurrent() == 1);
            int totalRow = 6;
            boolean ifLast = ((currIndex + pageSize) <= totalRow) ? true : false;
            int totalPage = (totalRow % pageSize) == 0 ? (totalRow / pageSize) : ((totalRow / pageSize) + 1);


            List<BaseInfoPatTypeList> baseInfoPatTypeLists = new ArrayList<BaseInfoPatTypeList>();
            BaseInfoPatTypeList b_1 = new BaseInfoPatTypeList("1","临床");
            BaseInfoPatTypeList b_2 = new BaseInfoPatTypeList("2","医技");
            baseInfoPatTypeLists.add(b_1);
            baseInfoPatTypeLists.add(b_2);

            PaginationResult<BaseInfoPatTypeList> paginationResult = new PaginationResult<BaseInfoPatTypeList>();
            paginationResult.setFirstPage(ifFirst);
            paginationResult.setLastPage(ifLast);
            paginationResult.setList(baseInfoPatTypeLists); //!
            paginationResult.setPageNumber(p.getPageCurrent());
            paginationResult.setTotalRow(totalRow);
            paginationResult.setTotalPage(totalPage);
            paginationResult.setPageSize(pageSize);

            return JSON.toJSONString(paginationResult);
    }
    @RequestMapping(value = "/getPersonAttribute")
    @ResponseBody
    public String getPersonAttribute(Pagination p) {
        int currIndex = (p.getPageCurrent() - 1) * p.getPageSize();
        int pageSize = p.getPageSize();
        boolean ifFirst = (p.getPageCurrent() == 1);
        int totalRow = 6;
        boolean ifLast = ((currIndex + pageSize) <= totalRow) ? true : false;
        int totalPage = (totalRow % pageSize) == 0 ? (totalRow / pageSize) : ((totalRow / pageSize) + 1);


        List<BaseInfoPatTypeList> baseInfoPatTypeLists = new ArrayList<BaseInfoPatTypeList>();
        BaseInfoPatTypeList b_1 = new BaseInfoPatTypeList("002", "医生");
        BaseInfoPatTypeList b_2 = new BaseInfoPatTypeList("003", "护士");
        BaseInfoPatTypeList b_3 = new BaseInfoPatTypeList("004", "主任");
        BaseInfoPatTypeList b_4 = new BaseInfoPatTypeList("005", "技师");
        baseInfoPatTypeLists.add(b_1);
        baseInfoPatTypeLists.add(b_2);
        baseInfoPatTypeLists.add(b_3);
        baseInfoPatTypeLists.add(b_4);

        PaginationResult<BaseInfoPatTypeList> paginationResult = new PaginationResult<BaseInfoPatTypeList>();
        paginationResult.setFirstPage(ifFirst);
        paginationResult.setLastPage(ifLast);
        paginationResult.setList(baseInfoPatTypeLists); //!
        paginationResult.setPageNumber(p.getPageCurrent());
        paginationResult.setTotalRow(totalRow);
        paginationResult.setTotalPage(totalPage);
        paginationResult.setPageSize(pageSize);

        return JSON.toJSONString(paginationResult);
    }

    @RequestMapping(value = "/getRoomInfo")
    @ResponseBody
    public String getRoomInfo(Pagination p) {
        int currIndex = (p.getPageCurrent() - 1) * p.getPageSize();
        int pageSize = p.getPageSize();
        boolean ifFirst = (p.getPageCurrent() == 1);
        int totalRow = 6;
        boolean ifLast = ((currIndex + pageSize) <= totalRow) ? true : false;
        int totalPage = (totalRow % pageSize) == 0 ? (totalRow / pageSize) : ((totalRow / pageSize) + 1);


        List<BaseInfoPatTypeList> baseInfoPatTypeLists = new ArrayList<BaseInfoPatTypeList>();
        BaseInfoPatTypeList b_1 = new BaseInfoPatTypeList("001", "一病房");
        BaseInfoPatTypeList b_2 = new BaseInfoPatTypeList("002", "二病房");
        BaseInfoPatTypeList b_3 = new BaseInfoPatTypeList("003", "三病房");
        BaseInfoPatTypeList b_4 = new BaseInfoPatTypeList("004", "四病房");
        baseInfoPatTypeLists.add(b_1);
        baseInfoPatTypeLists.add(b_2);
        baseInfoPatTypeLists.add(b_3);
        baseInfoPatTypeLists.add(b_4);

        PaginationResult<BaseInfoPatTypeList> paginationResult = new PaginationResult<BaseInfoPatTypeList>();
        paginationResult.setFirstPage(ifFirst);
        paginationResult.setLastPage(ifLast);
        paginationResult.setList(baseInfoPatTypeLists); //!
        paginationResult.setPageNumber(p.getPageCurrent());
        paginationResult.setTotalRow(totalRow);
        paginationResult.setTotalPage(totalPage);
        paginationResult.setPageSize(pageSize);

        return JSON.toJSONString(paginationResult);
    }

    @RequestMapping(value = "/getPersonPart")
    @ResponseBody
    public String getPersonPart(Pagination p) {
        int currIndex = (p.getPageCurrent() - 1) * p.getPageSize();
        int pageSize = p.getPageSize();
        boolean ifFirst = (p.getPageCurrent() == 1);
        int totalRow = 6;
        boolean ifLast = ((currIndex + pageSize) <= totalRow) ? true : false;
        int totalPage = (totalRow % pageSize) == 0 ? (totalRow / pageSize) : ((totalRow / pageSize) + 1);


        List<BaseInfoPatTypeList> baseInfoPatTypeLists = new ArrayList<BaseInfoPatTypeList>();
        BaseInfoPatTypeList b_1 = new BaseInfoPatTypeList("CT", "腰椎");
        BaseInfoPatTypeList b_2 = new BaseInfoPatTypeList("CT", "颈椎");
        BaseInfoPatTypeList b_3 = new BaseInfoPatTypeList("CT", "骶尾骨");
        BaseInfoPatTypeList b_4 = new BaseInfoPatTypeList("CT", "髋关节");
        BaseInfoPatTypeList b_5 = new BaseInfoPatTypeList("CT", "五官颈部");
        BaseInfoPatTypeList b_6 = new BaseInfoPatTypeList("CT", "头颅");
        BaseInfoPatTypeList b_7 = new BaseInfoPatTypeList("CT", "上腹部");
        BaseInfoPatTypeList b_8 = new BaseInfoPatTypeList("CT", "泌尿");
        BaseInfoPatTypeList b_9 = new BaseInfoPatTypeList("CT", "四肢关节");
        BaseInfoPatTypeList b_10 = new BaseInfoPatTypeList("CT", "心血管");
        BaseInfoPatTypeList b_11 = new BaseInfoPatTypeList("CT", "胸部");
        BaseInfoPatTypeList b_12 = new BaseInfoPatTypeList("CT", "膝关节");
        BaseInfoPatTypeList b_13 = new BaseInfoPatTypeList("CT", "椎体");
        BaseInfoPatTypeList b_14 = new BaseInfoPatTypeList("CT", "内分泌");
        BaseInfoPatTypeList b_15 = new BaseInfoPatTypeList("CT", "颈部");
        BaseInfoPatTypeList b_16 = new BaseInfoPatTypeList("CT", "腹部");
        baseInfoPatTypeLists.add(b_1);
        baseInfoPatTypeLists.add(b_2);
        baseInfoPatTypeLists.add(b_3);
        baseInfoPatTypeLists.add(b_4);
        baseInfoPatTypeLists.add(b_5);
        baseInfoPatTypeLists.add(b_6);
        baseInfoPatTypeLists.add(b_7);
        baseInfoPatTypeLists.add(b_8);
        baseInfoPatTypeLists.add(b_9);
        baseInfoPatTypeLists.add(b_10);
        baseInfoPatTypeLists.add(b_11);
        baseInfoPatTypeLists.add(b_12);
        baseInfoPatTypeLists.add(b_13);
        baseInfoPatTypeLists.add(b_14);
        baseInfoPatTypeLists.add(b_15);
        baseInfoPatTypeLists.add(b_16);

        PaginationResult<BaseInfoPatTypeList> paginationResult = new PaginationResult<BaseInfoPatTypeList>();
        paginationResult.setFirstPage(ifFirst);
        paginationResult.setLastPage(ifLast);
        paginationResult.setList(baseInfoPatTypeLists); //!
        paginationResult.setPageNumber(p.getPageCurrent());
        paginationResult.setTotalRow(totalRow);
        paginationResult.setTotalPage(totalPage);
        paginationResult.setPageSize(pageSize);

        return JSON.toJSONString(paginationResult);
    }

    @RequestMapping(value = "/getCheckResult")
    @ResponseBody
    public String getCheckResult(Pagination p) {
        int currIndex = (p.getPageCurrent() - 1) * p.getPageSize();
        int pageSize = p.getPageSize();
        boolean ifFirst = (p.getPageCurrent() == 1);
        int totalRow = 6;
        boolean ifLast = ((currIndex + pageSize) <= totalRow) ? true : false;
        int totalPage = (totalRow % pageSize) == 0 ? (totalRow / pageSize) : ((totalRow / pageSize) + 1);


        List<CheckResult> checkResults = new ArrayList<CheckResult>();
        CheckResult checkResult1=new CheckResult("01","正常","阳性");
        CheckResult checkResult2=new CheckResult("02","肿瘤","阴性");
        CheckResult checkResult3=new CheckResult("03","炎症","阴性");
        CheckResult checkResult4=new CheckResult("04","外伤","阴性");
        CheckResult checkResult5=new CheckResult("05","慢性","阴性");
        CheckResult checkResult6=new CheckResult("06","先天","阴性");
        CheckResult checkResult7=new CheckResult("07","其他","阴性");
        checkResults.add(checkResult1);
        checkResults.add(checkResult2);
        checkResults.add(checkResult3);
        checkResults.add(checkResult4);
        checkResults.add(checkResult5);
        checkResults.add(checkResult6);
        checkResults.add(checkResult7);


        PaginationResult<CheckResult> paginationResult = new PaginationResult<CheckResult>();
        paginationResult.setFirstPage(ifFirst);
        paginationResult.setLastPage(ifLast);
        paginationResult.setList(checkResults); //!
        paginationResult.setPageNumber(p.getPageCurrent());
        paginationResult.setTotalRow(totalRow);
        paginationResult.setTotalPage(totalPage);
        paginationResult.setPageSize(pageSize);

        return JSON.toJSONString(paginationResult);
    }

    @RequestMapping(value = "/getPatInfo")
    @ResponseBody
    public String getPatInfo(Pagination p)
    {
        int currIndex = (p.getPageCurrent() - 1) * p.getPageSize();
        int pageSize = p.getPageSize();
        boolean ifFirst = (p.getPageCurrent() == 1);
        int totalRow = 6;
        boolean ifLast = ((currIndex + pageSize) <= totalRow) ? true : false;
        int totalPage = (totalRow % pageSize) == 0 ? (totalRow / pageSize) : ((totalRow / pageSize) + 1);
        List<Patient> patients = new ArrayList<Patient>();
        patients.add(patientService.getAll());
        PaginationResult<Patient> paginationResult = new PaginationResult<Patient>();
        paginationResult.setFirstPage(ifFirst);
        paginationResult.setLastPage(ifLast);
        paginationResult.setList(patients);
        paginationResult.setPageNumber(p.getPageCurrent());
        paginationResult.setTotalRow(totalRow);
        paginationResult.setTotalPage(totalPage);
        paginationResult.setPageSize(pageSize);
        System.out.println(JSON.toJSONString(paginationResult));
        return JSON.toJSONString(paginationResult);
    }

    @RequestMapping(value = "/addNewUser")
    @ResponseBody
    public  String setUserInfo(@RequestParam("user_id") String user_id,
                              @RequestParam("user_pass") String user_pass,
                              @RequestParam("user_pass_confirm") String user_pass_confirm,
                              @RequestParam("user_name") String user_name,
                              @RequestParam("user_hos") String user_hos,
                               @RequestParam("user_dept") String user_dept,
                              HttpSession httpSession)throws IOException {
        //
        User u = new User();
        //System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        u.setUsername(user_id);
        u.setId(user_id);
        u.setPassword(user_pass);
        //System.out.println("%%%%%%%%%%%%%%%%%%%%%%%%%%");
        u.setName(user_name);
        u.setDept(user_dept);
        System.out.println(u);
        try{
            userService.addNewUser(u);
        }catch (Exception e){
            e.printStackTrace();
        }
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        return "0";
        }
}
